// Mini Exercise 1
  fun main() {
      val nameList = listOf("John", "Jacob", "Jingleheimer", "Schmidt")
      var myNameToo = nameList.fold("") {a, b -> a + b}
      println(myNameToo)
  }

// Mini Exercise 2
  fun main() {
      val nameList = listOf("John", "Jacob", "Jingleheimer", "Schmidt")
      val myNameToo = nameList.filter {it.length > 4}.fold("") {a, b -> a+ b}
      println(myNameToo)
  }

// Mini Exercise 3
  fun main() {
      val namesAndAges = mapOf("John" to 30, "Jake" to 14, "Bertha" to 8, "Cindy" to 25)
      val newMap = namesAndAges.filter {it.value < 18}
      println(newMap)
  }

// Mini Exercise 4
  fun main() {
      val namesAndAges = mapOf("John" to 30, "Jake" to 14, "Bertha" to 8, "Cindy" to 25)
      val adultList = namesAndAges.filter {it.value >= 18}.map{it.key}
      println(adultList)
  }

// Challenge 1
  fun main() {
      val lambdaTask = {a: String -> println(a)}

      fun repeatTask(times: Int, a: String, task: (String) -> Unit) {
          repeat(times) {task(a)}
      }
      repeatTask(10, "Kotlin Apprentice is a great book!", lambdaTask)
  }

// Challenge 3
  fun main() {
      val appRatings = mapOf(
              "Calendar Pro" to arrayOf(1, 5, 5, 4, 2, 1, 5, 4),
              "The Messenger" to arrayOf(5, 4, 2, 5, 4, 1, 1, 2),
              "Socialise" to arrayOf(2, 1, 2, 2, 1, 2, 4, 2)
      )

      // val averageRatings = appRatings.forEach{ (k,v) -> v.reduce { acc, i -> acc + i }/v.size} // returns Unit, not Map
      val averageRatings = appRatings.mapValues { it.value.average() } // best method
      // val averageRatings = appRatings.mapValues { (_, v) -> v.reduce{acc, i -> acc+i}/v.size } // closest to instructions

      println(averageRatings)
      println(averageRatings.filterValues { it > 3 })
  }
